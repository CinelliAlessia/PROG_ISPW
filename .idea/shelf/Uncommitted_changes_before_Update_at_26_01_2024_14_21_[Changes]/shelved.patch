Index: src/main/java/view/LoginCtrlGrafico.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controllerApplicativo.LoginCtrlApplicativo;\r\nimport engineering.bean.LoginBean;\r\nimport engineering.bean.UserBean;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.stage.Stage;\r\nimport start.MainApplication;\r\n\r\nimport java.io.IOException;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\nimport static java.lang.System.exit;\r\n\r\npublic class LoginCtrlGrafico {\r\n    public Button login, register, account;\r\n    public PasswordField password;\r\n    public TextField username;\r\n    @FXML\r\n    private Label textLogin;\r\n\r\n    public void start(Stage stage) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(MainApplication.class.getResource(\"/view/login.fxml\"));\r\n        Scene scene = new Scene(fxmlLoader.load());\r\n        stage.setTitle(\"Access Login\");\r\n        stage.setResizable(false);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    @FXML\r\n    protected void onLoginClick() throws IOException {\r\n\r\n        String email = username.getText();\r\n        String pass = password.getText();\r\n\r\n        if (!verificaEmailCorrect(email)){ // Controlli se i parametri scritti sono funzionanti\r\n            textLogin.isVisible();\r\n            textLogin.setText(\"Email non valida\");\r\n            exit(0);\r\n        }\r\n\r\n        // Creo la bean e imposto i parametri\r\n        LoginBean loginBean = new LoginBean(email,pass);\r\n\r\n        // se credenziali ok --> questo va qua?\r\n        LoginCtrlApplicativo loginCtrlApp = new LoginCtrlApplicativo();\r\n\r\n        if (loginCtrlApp.verificaCredenziali(loginBean)) {\r\n            System.out.println(\"CREDENZIALI CORRETTE\");\r\n            /*Credenziali corrette, mostro la home page*/\r\n            // Dovrei popolare la userBean(?)\r\n            Stage stage = (Stage) login.getScene().getWindow();\r\n            HomePageCtrlGrafico homePageCGUI = new HomePageCtrlGrafico();\r\n            homePageCGUI.start(stage);\r\n\r\n        } else { /*Credenziali non valide*/\r\n            textLogin.isVisible();\r\n            textLogin.setText(\"Credenziali errate\");\r\n        }\r\n    }\r\n    @FXML\r\n    protected void onRegisterClick() throws IOException { // Non devo fa controlli\r\n        Stage stage = (Stage) register.getScene().getWindow();\r\n        RegistrazioneCtrlGrafico registrazioneCtrlGrafico = new RegistrazioneCtrlGrafico();\r\n        registrazioneCtrlGrafico.start(stage);\r\n    }\r\n\r\n    @FXML\r\n    protected void onGuestClick() throws IOException { // Non devo fa controlli\r\n        Stage stage = (Stage) login.getScene().getWindow();\r\n        HomePageCtrlGrafico homePageCGUI = new HomePageCtrlGrafico();\r\n        homePageCGUI.start(stage);\r\n    }\r\n\r\n\r\n\r\n    /*Questo va qua? non c'è riuso di codice*/\r\n    public boolean verificaEmailCorrect(String email) {\r\n        /*Controllo basico se ha almeno una @ e un punto dopo la @? */\r\n        // Definisci il pattern per una email valida\r\n        String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\r\n\r\n        // Crea un oggetto Pattern\r\n        Pattern pattern = Pattern.compile(emailRegex);\r\n\r\n        // Crea un oggetto Matcher con la stringa email da verificare\r\n        Matcher matcher = pattern.matcher(email);\r\n\r\n        // Verifica se il formato dell'email è valido\r\n        return matcher.matches();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/view/LoginCtrlGrafico.java b/src/main/java/view/LoginCtrlGrafico.java
--- a/src/main/java/view/LoginCtrlGrafico.java	(revision a2137cc19435449ca540643f51da78781bd53b97)
+++ b/src/main/java/view/LoginCtrlGrafico.java	(date 1706270237138)
@@ -56,6 +56,7 @@
             Stage stage = (Stage) login.getScene().getWindow();
             HomePageCtrlGrafico homePageCGUI = new HomePageCtrlGrafico();
             homePageCGUI.start(stage);
+            System.out.println("Sono sotto homePageCGUI.start");
 
         } else { /*Credenziali non valide*/
             textLogin.isVisible();
@@ -76,8 +77,6 @@
         homePageCGUI.start(stage);
     }
 
-
-
     /*Questo va qua? non c'è riuso di codice*/
     public boolean verificaEmailCorrect(String email) {
         /*Controllo basico se ha almeno una @ e un punto dopo la @? */
Index: src/main/java/controllerApplicativo/LoginCtrlApplicativo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllerApplicativo;\r\n\r\nimport engineering.bean.LoginBean;\r\nimport engineering.dao.UserDAO; // Assumendo che tu abbia una classe UserDAO per gestire l'accesso al database.\r\nimport engineering.dao.UserDAO_mySQL;\r\nimport model.User;\r\n\r\npublic class LoginCtrlApplicativo {\r\n    // implemento la logica dello use case\r\n\r\n    public LoginCtrlApplicativo() {\r\n    }\r\n\r\n\r\n    // Implementa la logica dello use case\r\n    public boolean verificaCredenziali(LoginBean bean) {\r\n        UserDAO_mySQL userDAO = new UserDAO_mySQL();\r\n        // Ottieni la password dal database usando l'email\r\n        String passwordFromDB = userDAO.getPasswordByEmail(bean.getEmail());\r\n\r\n        // Verifica se le credenziali sono corrette\r\n        return passwordFromDB != null && passwordFromDB.equals(bean.getPassword());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controllerApplicativo/LoginCtrlApplicativo.java b/src/main/java/controllerApplicativo/LoginCtrlApplicativo.java
--- a/src/main/java/controllerApplicativo/LoginCtrlApplicativo.java	(revision a2137cc19435449ca540643f51da78781bd53b97)
+++ b/src/main/java/controllerApplicativo/LoginCtrlApplicativo.java	(date 1706270237144)
@@ -2,6 +2,7 @@
 
 import engineering.bean.LoginBean;
 import engineering.dao.UserDAO; // Assumendo che tu abbia una classe UserDAO per gestire l'accesso al database.
+import engineering.dao.UserDAO_JSON;
 import engineering.dao.UserDAO_mySQL;
 import model.User;
 
@@ -11,14 +12,16 @@
     public LoginCtrlApplicativo() {
     }
 
-
     // Implementa la logica dello use case
     public boolean verificaCredenziali(LoginBean bean) {
         UserDAO_mySQL userDAO = new UserDAO_mySQL();
+        UserDAO_JSON userDAOFS = new UserDAO_JSON();
         // Ottieni la password dal database usando l'email
         String passwordFromDB = userDAO.getPasswordByEmail(bean.getEmail());
+        String passwordFromFS = userDAOFS.getPasswordByEmail(bean.getEmail());
 
         // Verifica se le credenziali sono corrette
-        return passwordFromDB != null && passwordFromDB.equals(bean.getPassword());
+
+        return passwordFromDB != null && passwordFromDB.equals(bean.getPassword()) && passwordFromFS.equals(bean.getPassword());
     }
 }
\ No newline at end of file
Index: src/main/java/controllerApplicativo/RegistrazioneCtrlApplicativo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllerApplicativo;\r\n\r\nimport engineering.bean.UserBean;\r\nimport engineering.dao.UserDAO;\r\nimport engineering.dao.UserDAOMONGO;\r\nimport engineering.dao.UserDAO_JSON;\r\nimport engineering.dao.UserDAO_mySQL;\r\nimport engineering.exceptions.EmailAlreadyInUse;\r\nimport model.User;\r\n\r\nimport java.sql.SQLException;\r\n\r\npublic class RegistrazioneCtrlApplicativo {\r\n\r\n    public void registerUserAndrea(UserBean bean) {\r\n        User user = new User(bean.getNome(), bean.getEmail(), bean.getPass(), bean.getPreferences());\r\n        UserDAO_JSON dao = new UserDAO_JSON();\r\n        dao.insertUser(user);\r\n    }\r\n\r\n    public void registerUserDBMongo(UserBean bean) {\r\n        User user = new User(bean.getNome(), bean.getEmail(), bean.getPass(), bean.getPreferences());\r\n        UserDAO userDAOmongo = new UserDAOMONGO();\r\n        userDAOmongo.insertUser(user);\r\n    }\r\n\r\n    public void registerUserDB(UserBean bean) throws EmailAlreadyInUse, SQLException, ClassNotFoundException {\r\n        User user = new User(bean.getNome(), bean.getEmail(), bean.getPass(), bean.getPreferences());\r\n        UserDAO_mySQL.insertUser(user);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controllerApplicativo/RegistrazioneCtrlApplicativo.java b/src/main/java/controllerApplicativo/RegistrazioneCtrlApplicativo.java
--- a/src/main/java/controllerApplicativo/RegistrazioneCtrlApplicativo.java	(revision a2137cc19435449ca540643f51da78781bd53b97)
+++ b/src/main/java/controllerApplicativo/RegistrazioneCtrlApplicativo.java	(date 1706269110023)
@@ -2,7 +2,6 @@
 
 import engineering.bean.UserBean;
 import engineering.dao.UserDAO;
-import engineering.dao.UserDAOMONGO;
 import engineering.dao.UserDAO_JSON;
 import engineering.dao.UserDAO_mySQL;
 import engineering.exceptions.EmailAlreadyInUse;
@@ -18,15 +17,10 @@
         dao.insertUser(user);
     }
 
-    public void registerUserDBMongo(UserBean bean) {
-        User user = new User(bean.getNome(), bean.getEmail(), bean.getPass(), bean.getPreferences());
-        UserDAO userDAOmongo = new UserDAOMONGO();
-        userDAOmongo.insertUser(user);
-    }
-
     public void registerUserDB(UserBean bean) throws EmailAlreadyInUse, SQLException, ClassNotFoundException {
         User user = new User(bean.getNome(), bean.getEmail(), bean.getPass(), bean.getPreferences());
         UserDAO_mySQL.insertUser(user);
+        UserDAO userDAO = new UserDAO_JSON();
     }
 
 }
\ No newline at end of file
Index: src/main/java/start/MainApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package start;\r\n\r\nimport view.LoginCtrlGrafico;\r\nimport javafx.application.Application;\r\nimport javafx.stage.Stage;\r\nimport java.io.IOException;\r\n\r\npublic class MainApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) throws IOException {\r\n        LoginCtrlGrafico loginCtrlGrafico = new LoginCtrlGrafico();\r\n        loginCtrlGrafico.start(stage);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/start/MainApplication.java b/src/main/java/start/MainApplication.java
--- a/src/main/java/start/MainApplication.java	(revision a2137cc19435449ca540643f51da78781bd53b97)
+++ b/src/main/java/start/MainApplication.java	(date 1706258545028)
@@ -16,4 +16,4 @@
     public static void main(String[] args) {
         launch();
     }
-}
\ No newline at end of file
+}
Index: src/main/java/engineering/dao/UserDAOMONGO.java
===================================================================
diff --git a/src/main/java/engineering/dao/UserDAOMONGO.java b/src/main/java/engineering/dao/UserDAOMONGO.java
deleted file mode 100644
--- a/src/main/java/engineering/dao/UserDAOMONGO.java	(revision a2137cc19435449ca540643f51da78781bd53b97)
+++ /dev/null	(revision a2137cc19435449ca540643f51da78781bd53b97)
@@ -1,57 +0,0 @@
-package engineering.dao;
-
-import com.mongodb.MongoClient;
-import com.mongodb.client.MongoCollection;
-import com.mongodb.client.MongoDatabase;
-import model.User;
-import org.bson.Document;
-
-
-public class UserDAOMONGO implements UserDAO{
-
-    private static final String USER_EMAIL = "userEmail";
-    private static final String USER_NAME = "name";
-    private static final String USER_PASSWORD = "password";
-    private static final String USER_PREF = "pref";
-    private static final String HOST = "localhost";
-    private static final int PORT = 27017;
-
-    public void insertUser(User user){
-        MongoClient mongoClient = new MongoClient(HOST, PORT);
-        MongoDatabase database = mongoClient.getDatabase("Spotify");
-        MongoCollection<Document> collection = database.getCollection("User");
-
-        Document document = new Document(USER_NAME, user.getNome())
-                .append(USER_EMAIL, user.getEmail())
-                .append(USER_PASSWORD, user.getPass())
-                .append(USER_PREF, user.getPref());
-
-        collection.insertOne(document);
-        mongoClient.close();
-    }
-
-    @Override
-    public String getPasswordByEmail(String email) {
-        return null;
-    }
-
-    @Override
-    public void saveUser(User userInstance) {
-
-    }
-
-    @Override
-    public void deleteUser(User userIstance) {
-
-    }
-
-    @Override
-    public void retreiveUserByUserName(String userName) {
-
-    }
-
-    @Override
-    public void retreiveUserByUserId(String userId) {
-
-    }
-}
Index: src/main/resources/persistence/users/ale/info.json
===================================================================
diff --git a/src/main/resources/persistence/users/ale/info.json b/src/main/resources/persistence/users/ale/info.json
deleted file mode 100644
--- a/src/main/resources/persistence/users/ale/info.json	(revision a2137cc19435449ca540643f51da78781bd53b97)
+++ /dev/null	(revision a2137cc19435449ca540643f51da78781bd53b97)
@@ -1,12 +0,0 @@
-{
-  "nome": "ale",
-  "email": "ale@gm.com",
-  "pass": "cia",
-  "pref": []
-}
-{
-  "nome": "ale",
-  "email": "ciao@a.it",
-  "pass": "cia",
-  "pref": []
-}
Index: src/main/java/engineering/dao/UserDAO_JSON.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package engineering.dao;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\nimport model.User;\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\n\r\npublic class UserDAO_JSON implements UserDAO {\r\n    private static final String BASE_DIRECTORY = \"src/main/resources/persistence/users\";\r\n\r\n    @Override\r\n    public void insertUser(User user) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public String getPasswordByEmail(String email) {\r\n        return null;\r\n    }\r\n\r\n    public void saveUser(User user){\r\n\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n        String json = gson.toJson(user);\r\n\r\n        Path userDirectory = Paths.get(BASE_DIRECTORY, user.getNome());\r\n\r\n        try {\r\n            // Crea la directory con il nome del'utente per l'utente se non esiste\r\n            Files.createDirectories(userDirectory);\r\n\r\n            // Crea un file JSON per l'utente (es. \"playlist.json\")\r\n            String fileName = \"info.json\";\r\n            Path userFile = userDirectory.resolve(fileName);\r\n\r\n            // Scrivi il JSON nel file\r\n            FileWriter fileWriter = new FileWriter(userFile.toString(), true);\r\n            fileWriter.write(json + \"\\n\");\r\n            fileWriter.close();\r\n\r\n            System.out.println(\"Utente registrato con successo!\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    @Override\r\n    public void deleteUser(User userInstance) {\r\n        Path userDirectory = Paths.get(BASE_DIRECTORY, userInstance.getNome());\r\n\r\n        try {\r\n            Files.walk(userDirectory)\r\n                    .filter(Files::isRegularFile)\r\n                    .map(Path::toFile)\r\n                    .forEach(File::delete);\r\n\r\n            Files.deleteIfExists(userDirectory); // Rimuove la directory dell'utente\r\n            System.out.println(\"Utente eliminato con successo!\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    @Override\r\n    public void retreiveUserByUserName(String username) {\r\n        Path userDirectory = Paths.get(BASE_DIRECTORY, username);\r\n\r\n        if (Files.exists(userDirectory)) {\r\n            try {\r\n                Files.walk(userDirectory)\r\n                        .filter(Files::isRegularFile)\r\n                        .forEach(file -> {\r\n                            try {\r\n                                String content = Files.readString(file);\r\n                                // Usa Gson per deserializzare il contenuto JSON e ottenere l'utente\r\n                                Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n                                User user = gson.fromJson(content, User.class);\r\n                                // Fai qualcosa con l'utente recuperato\r\n                                System.out.println(user);\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        });\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            System.out.println(\"Utente non trovato!\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void retreiveUserByUserId(String userId) {\r\n        // Implementazione per recuperare gli utenti per ID se è presente questa logica nel filesystem\r\n        // Questo dipende dalla struttura specifica del tuo sistema di file\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/engineering/dao/UserDAO_JSON.java b/src/main/java/engineering/dao/UserDAO_JSON.java
--- a/src/main/java/engineering/dao/UserDAO_JSON.java	(revision a2137cc19435449ca540643f51da78781bd53b97)
+++ b/src/main/java/engineering/dao/UserDAO_JSON.java	(date 1706269223864)
@@ -12,15 +12,59 @@
 import java.nio.file.Paths;
 
 public class UserDAO_JSON implements UserDAO {
+    //##################### METTERE NEL FILE DI CONFIGURAZIONE #########################
     private static final String BASE_DIRECTORY = "src/main/resources/persistence/users";
 
     @Override
     public void insertUser(User user) {
+        // Costruisci il percorso della directory dell'utente (presumibilmente basandoti sulla mail come nome utente)
+        Path userDirectory = Paths.get(BASE_DIRECTORY, user.getEmail());
+
+        try {
+            // Crea la directory con il nome dell'utente se non esiste
+            Files.createDirectories(userDirectory);
+
+            // Costruisci il percorso del file userInfo.json
+            Path userInfoFile = userDirectory.resolve("userInfo.json");
+
+            // Usa Gson per convertire l'oggetto User in una rappresentazione JSON
+            Gson gson = new GsonBuilder().setPrettyPrinting().create();
+            String json = gson.toJson(user);
 
+            // Scrivi il JSON nel file userInfo.json
+            Files.writeString(userInfoFile, json);
+
+            System.out.println("Utente inserito con successo!");
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
     }
 
     @Override
     public String getPasswordByEmail(String email) {
+        // Costruisco il percorso del file userInfo.json per l'utente (presumibilmente basandoti sulla mail come nome utente)
+        Path userInfoFile = Paths.get(BASE_DIRECTORY, email, "userInfo.json");
+
+        // Verifica se il file userInfo.json esiste
+        if (Files.exists(userInfoFile)) {
+            try {
+                // Leggi il contenuto del file
+                String content = Files.readString(userInfoFile);
+
+                // Usa Gson per deserializzare il contenuto JSON e ottenere l'utente
+                Gson gson = new GsonBuilder().setPrettyPrinting().create();
+                User user = gson.fromJson(content, User.class);
+
+                // Restituisci la password dell'utente
+                return user.getPassword();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        } else {
+            System.out.println("Utente non trovato o file userInfo.json mancante.");
+        }
+
+        // Se qualcosa va storto o l'utente non esiste, restituisci null
         return null;
     }
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5ab3b5b7-0136-4bcd-b52a-626b23fdea42\" name=\"Changes\" comment=\"Update\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/view/AccountCtrlGrafico.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/resources/view/account.fxml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/controllerApplicativo/LoginCtrlApplicativo.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/controllerApplicativo/LoginCtrlApplicativo.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/controllerApplicativo/RegistrazioneCtrlApplicativo.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/controllerApplicativo/RegistrazioneCtrlApplicativo.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/engineering/dao/UserDAO_mySQL.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/engineering/dao/UserDAO_mySQL.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/engineering/query/QueryLogin.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/engineering/query/QueryLogin.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/view/HomePageCtrlGrafico.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/view/HomePageCtrlGrafico.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/view/LoginCtrlGrafico.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/view/LoginCtrlGrafico.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/view/RegistrazioneCtrlGrafico.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/view/RegistrazioneCtrlGrafico.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/view/homePage.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/view/homePage.fxml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/view/login.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/view/login.fxml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/view/registrazione.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/view/registrazione.fxml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;mzlala&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"abec164f-27d4-42ac-a43d-09f2629c05d4\" />\r\n        <option name=\"url\" value=\"https://github.com/mzlala/PROG_ISPW.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"DEPENDENCY_CHECKER_PROBLEMS_TAB\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ZoVPF9GIOXZOMXQACOzvhMkf5x\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.MainApplication.executor&quot;: &quot;Run&quot;,\r\n    &quot;Application.MongoDBConnector.executor&quot;: &quot;Run&quot;,\r\n    &quot;Application.StartByMain.executor&quot;: &quot;Run&quot;,\r\n    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,\r\n    &quot;OverrideImplement.generate.javadoc&quot;: &quot;true&quot;,\r\n    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;jdk.selected.JAVA_MODULE&quot;: &quot;21&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_directory_selection&quot;: &quot;C:/Users/cinel/Desktop/Università/ISPW/Progetto/PROG_ISPW/src/main/java/view&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/cinel/AppData/Local/SceneBuilder/SceneBuilder.exe&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.37587237&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settings.project.maven.repository.indices&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;mysql&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\andre\\Desktop\\ISPW\\Progetto\\PROG_ISPW\\src\\main\\resources\" />\r\n      <recent name=\"C:\\Users\\cinel\\Desktop\\Università\\ISPW\\Progetto\\PROG_ISPW\\src\\main\\java\\logic\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunAnythingCache\">\r\n    <option name=\"myCommands\">\r\n      <command value=\"error_field\" />\r\n    </option>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"StartByMain\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"start.MainApplication\" />\r\n      <module name=\"spotify\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <module name=\"PROG_ISPW\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <module name=\"PROG_ISPW\" />\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-21.0.1-openjdk-21.0.1-3183f394aec4-7d648f2c\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5ab3b5b7-0136-4bcd-b52a-626b23fdea42\" name=\"Changes\" comment=\"\" />\r\n      <created>1703088395878</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1703088395878</updated>\r\n      <workItem from=\"1703088399448\" duration=\"14000\" />\r\n      <workItem from=\"1703142487444\" duration=\"4686000\" />\r\n      <workItem from=\"1703165322229\" duration=\"2796000\" />\r\n      <workItem from=\"1703171298288\" duration=\"11000\" />\r\n      <workItem from=\"1703174947490\" duration=\"181000\" />\r\n      <workItem from=\"1703175800989\" duration=\"395000\" />\r\n      <workItem from=\"1703954545008\" duration=\"13000\" />\r\n      <workItem from=\"1704726434904\" duration=\"11000\" />\r\n      <workItem from=\"1704752423900\" duration=\"647000\" />\r\n      <workItem from=\"1704787655010\" duration=\"7654000\" />\r\n      <workItem from=\"1706172107942\" duration=\"7567000\" />\r\n      <workItem from=\"1706188118080\" duration=\"6901000\" />\r\n      <workItem from=\"1706196693438\" duration=\"4654000\" />\r\n      <workItem from=\"1706255400628\" duration=\"2538000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Merge corretto, persistenze file e db\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703152476839</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703152476840</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Assegnate le giuste responsabilità per l'insert nel db mongo\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703156040795</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703156040795</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"user dao mongo\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703168434508</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703168434508</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Aggiunta connessione database sql\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1706175755439</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1706175755439</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Aggiunta connessione database sql\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1706175955660</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1706175955660</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Aggiunta connessione database sql\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1706176153705</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1706176153705</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Update\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1706183654204</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1706183654204</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Merge corretto, persistenze file e db\" />\r\n    <MESSAGE value=\"Assegnate le giuste responsabilità per l'insert nel db mongo\" />\r\n    <MESSAGE value=\"user dao mongo\" />\r\n    <MESSAGE value=\"Aggiunta connessione database sql\" />\r\n    <MESSAGE value=\"Update\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Update\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a2137cc19435449ca540643f51da78781bd53b97)
+++ b/.idea/workspace.xml	(date 1706269715330)
@@ -5,19 +5,20 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="5ab3b5b7-0136-4bcd-b52a-626b23fdea42" name="Changes" comment="Update">
-      <change afterPath="$PROJECT_DIR$/src/main/java/view/AccountCtrlGrafico.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/resources/view/account.fxml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/generi musicali" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/persistence/inutile" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/persistence/users/Andrea99/userInfo.json" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/persistence/users/inutile" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/controllerApplicativo/LoginCtrlApplicativo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controllerApplicativo/LoginCtrlApplicativo.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/controllerApplicativo/RegistrazioneCtrlApplicativo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controllerApplicativo/RegistrazioneCtrlApplicativo.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/engineering/dao/UserDAO_mySQL.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/engineering/dao/UserDAO_mySQL.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/engineering/dao/UserDAOMONGO.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/engineering/dao/UserDAO_JSON.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/engineering/dao/UserDAO_JSON.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/engineering/query/QueryLogin.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/engineering/query/QueryLogin.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/view/HomePageCtrlGrafico.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/HomePageCtrlGrafico.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/model/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/User.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/start/MainApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/start/MainApplication.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/view/LoginCtrlGrafico.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/LoginCtrlGrafico.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/view/RegistrazioneCtrlGrafico.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/RegistrazioneCtrlGrafico.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/view/homePage.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/view/homePage.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/view/login.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/view/login.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/view/registrazione.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/view/registrazione.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/persistence/users/ale/info.json" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -105,6 +106,7 @@
 }</component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
+      <recent name="C:\Users\andre\Desktop\ISPW\Progetto\PROG_ISPW\src\main\resources\persistence\users\Andrea99" />
       <recent name="C:\Users\andre\Desktop\ISPW\Progetto\PROG_ISPW\src\main\resources" />
       <recent name="C:\Users\cinel\Desktop\Università\ISPW\Progetto\PROG_ISPW\src\main\java\logic" />
     </key>
Index: src/main/java/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>    package model;\r\n\r\n    import java.util.ArrayList;\r\n\r\n    public class User {\r\n        private String nome, email,pass;\r\n        private ArrayList<String> pref;\r\n        public User(String nome, String email, String pass, ArrayList preferences){\r\n            setNome(nome);\r\n            setEmail(email);\r\n            setPass(pass);\r\n            setPreferences(preferences);\r\n        }\r\n        public void setEmail(String email) {\r\n            this.email = email;\r\n        }\r\n\r\n        public void setNome(String nome) {\r\n            this.nome = nome;\r\n        }\r\n\r\n        public void setPass(String pass) {\r\n            this.pass = pass;\r\n        }\r\n        public void setPreferences(ArrayList<String> preferences) {\r\n            this.pref = preferences;\r\n        }\r\n\r\n        public String getNome() {\r\n            return nome;\r\n        }\r\n\r\n        public String getEmail() {\r\n            return email;\r\n        }\r\n\r\n        public String getPass() {\r\n            return pass;\r\n        }\r\n\r\n        public ArrayList<String> getPref() {\r\n            return pref;\r\n        }\r\n    }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/User.java b/src/main/java/model/User.java
--- a/src/main/java/model/User.java	(revision a2137cc19435449ca540643f51da78781bd53b97)
+++ b/src/main/java/model/User.java	(date 1706267305257)
@@ -3,12 +3,12 @@
     import java.util.ArrayList;
 
     public class User {
-        private String nome, email,pass;
+        private String nome, email, password;
         private ArrayList<String> pref;
         public User(String nome, String email, String pass, ArrayList preferences){
             setNome(nome);
             setEmail(email);
-            setPass(pass);
+            setPassword(pass);
             setPreferences(preferences);
         }
         public void setEmail(String email) {
@@ -19,8 +19,8 @@
             this.nome = nome;
         }
 
-        public void setPass(String pass) {
-            this.pass = pass;
+        public void setPassword(String password) {
+            this.password = password;
         }
         public void setPreferences(ArrayList<String> preferences) {
             this.pref = preferences;
@@ -34,8 +34,8 @@
             return email;
         }
 
-        public String getPass() {
-            return pass;
+        public String getPassword() {
+            return password;
         }
 
         public ArrayList<String> getPref() {
Index: src/main/resources/persistence/users/Andrea99/userInfo.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/persistence/users/Andrea99/userInfo.json b/src/main/resources/persistence/users/Andrea99/userInfo.json
new file mode 100644
--- /dev/null	(date 1706267189687)
+++ b/src/main/resources/persistence/users/Andrea99/userInfo.json	(date 1706267189687)
@@ -0,0 +1,6 @@
+{
+  "mail": "prova@gmail.com",
+  "password": "prova123",
+  "preferences": ["Rock", "Pop", "Electronic"],
+  "playlistCount": 0
+}
Index: src/main/java/engineering/query/QueryLogin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Source code recreated from a .class file by IntelliJ IDEA\r\n// (powered by FernFlower decompiler)\r\n//\r\n\r\npackage engineering.query;\r\n\r\nimport model.User;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\nimport java.util.ArrayList;\r\n\r\npublic class QueryLogin {\r\n    private QueryLogin() {\r\n    }\r\n\r\n    // Metodo di INSERIMENTO in database\r\n    public static void registerUser(Statement stmt, User user) throws SQLException {\r\n        String name = user.getNome();\r\n        String email = user.getEmail();\r\n        String pw = user.getPass();\r\n        String insertStatement = String.format(\"INSERT INTO User (username, email, password) VALUES ('%s','%s','%s')\", name, email, pw);\r\n        insertGeneriMusicali(stmt,email,user.getPref());\r\n        stmt.executeUpdate(insertStatement);\r\n    }\r\n\r\n    public static void insertGeneriMusicali(Statement stmt, String userEmail, ArrayList<String> generiMusicali) throws SQLException {\r\n        // Costruisci la query di inserimento\r\n        StringBuilder query = new StringBuilder(\"INSERT INTO generimusicali (user_email, Pop, Indie, Classic, Rock, Electronic, House, HipHop, Jazz, Acoustic, Reb, Country, Alternative) VALUES \");\r\n        query.append(String.format(\"('%s',\", userEmail));\r\n\r\n        // Aggiungi i valori booleani alla query\r\n        for (String genere : generiMusicali) {\r\n            query.append(String.format(\" '%d',\", generiMusicali.contains(genere) ? 1 : 0));\r\n        }\r\n\r\n        // Rimuovi l'ultima virgola\r\n        query.deleteCharAt(query.length() - 1);\r\n\r\n        // Completa la query\r\n        query.append(\")\");\r\n\r\n        // Esegui la query\r\n        stmt.executeUpdate(query.toString());\r\n    }\r\n\r\n\r\n    // Query per prendere la email, utilizzata nella registrazione per vedere se l'email è già registrata\r\n    public static ResultSet loginUser(Statement stmt, String username) throws SQLException {\r\n        String sql = \"SELECT * FROM user WHERE Username = '\" + username + \"';\";\r\n        return stmt.executeQuery(sql);\r\n    }\r\n\r\n\r\n    // Query per prendere la password della email passata come argomento\r\n    public static ResultSet getUserPassword(Statement stmt, String email) throws SQLException {\r\n        String query = \"SELECT password FROM user WHERE email = '\" + email + \"'\";\r\n        return stmt.executeQuery(query);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/engineering/query/QueryLogin.java b/src/main/java/engineering/query/QueryLogin.java
--- a/src/main/java/engineering/query/QueryLogin.java	(revision a2137cc19435449ca540643f51da78781bd53b97)
+++ b/src/main/java/engineering/query/QueryLogin.java	(date 1706267305238)
@@ -20,7 +20,7 @@
     public static void registerUser(Statement stmt, User user) throws SQLException {
         String name = user.getNome();
         String email = user.getEmail();
-        String pw = user.getPass();
+        String pw = user.getPassword();
         String insertStatement = String.format("INSERT INTO User (username, email, password) VALUES ('%s','%s','%s')", name, email, pw);
         insertGeneriMusicali(stmt,email,user.getPref());
         stmt.executeUpdate(insertStatement);
diff --git a/src/main/resources/generi musicali b/src/main/resources/generi musicali
new file mode 100644
diff --git a/src/main/resources/persistence/users/inutile b/src/main/resources/persistence/users/inutile
new file mode 100644
diff --git a/src/main/resources/persistence/inutile b/src/main/resources/persistence/inutile
new file mode 100644
